@model DigitalSignageAdapter.Models.Home.Compare

@section Css{
    <link rel="stylesheet" href="~/Content/bootstrap-datetimepicker.css" />
}

@section Scripts{
    <script type="text/javascript" src="~/Scripts/moment-with-locales.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap-datetimepicker.js"></script>
    <script type="text/javascript" src="~/Scripts/Compare.js"></script>
    <script type="text/javascript">
        $(function () {
            var dtpOptions =
                {
                    format: 'MM/DD/YYYY LT',
                    //extraFormats: ['DD.M.YYYY. LTS'],
                    showClose: true,
                    showTodayButton: true
                };

            $('#ClientTimeFrom').datetimepicker(dtpOptions);
            $('#ClientTimeTo').datetimepicker(dtpOptions);

            //$("label[for=TimeInDays]").click(toggleTimeEntryType);
            //$("label[for=ClientTimeFrom]").click(toggleTimeEntryType);

            //function toggleTimeEntryType() {
            //    var rowTimeInDays = $("label[for=TimeInDays]").closest(".row");
            //    var rowTimeFromTo = $("label[for=ClientTimeFrom]").closest(".row");

            //    if (rowTimeInDays.hasClass('hidden')) {
            //        rowTimeInDays.removeClass("hidden");
            //        rowTimeFromTo.addClass("hidden");
            //        $("input[name=TimeEntryType]").val("0");
            //    } else {
            //        rowTimeFromTo.removeClass("hidden");
            //        rowTimeInDays.addClass("hidden");
            //        $("input[name=TimeEntryType]").val("1");
            //    }
            //}
        });
    </script>
}

@{
    ViewBag.Title = "Compare";

    System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("en-US");
}

@using (Html.BeginForm("Compare", "Home", FormMethod.Post, new { @class = "user-form" }))
{
    @Html.HiddenFor(m => m.AddBusinessId)
    @Html.HiddenFor(m => m.RemoveBusinessIdx)
    @Html.HiddenFor(m => m.AddLineBusinessIdx)
    @Html.HiddenFor(m => m.AddLineId)
    @Html.HiddenFor(m => m.RemoveLineIdx)
    @Html.HiddenFor(m => m.TimeEntryType)
    <div class="row input-group @(Model.TimeEntryType == DigitalSignageAdapter.Models.Shared.TimeEntryType.Days ? "hidden" : "")" style="margin: 5px -10px">
        @Html.LabelFor(m => m.ClientTimeFrom, "From/to", new { @class = "input-group-addon btn btn-primary" })
        @Html.TextBoxFor(m => m.ClientTimeFrom, new { @class = "form-control" })
        <span class="input-group-addon">
            <span class="glyphicon glyphicon-calendar"></span>
        </span>
        @Html.TextBoxFor(m => m.ClientTimeTo, new { @class = "form-control" })
        <span class="input-group-addon">
            <span class="glyphicon glyphicon-calendar"></span>
        </span>
    </div>
    <div class="row input-group @(Model.TimeEntryType == DigitalSignageAdapter.Models.Shared.TimeEntryType.FromTo ? "hidden" : "")" style="margin: 5px -10px">
        @Html.LabelFor(m => m.TimeInDays, "Days", new { @class = "input-group-addon btn btn-primary" })
        @Html.TextBoxFor(m => m.TimeInDays, new { type = "number", min = "0", @class = "form-control" })
    </div>
    @*<div class="row top-buffer form-inline @(Model.TimeEntryType == DigitalSignageAdapter.Models.Shared.TimeEntryType.Days ? "hidden" : "")">
        <div class="col-sm-7" style="margin-left: -5px">
            @Html.LabelFor(m => m.ClientTimeFrom, "From/to", new { @class = "btn btn-primary" })
            <div class="form-group">
                <div class="input-group date" id="dtpFrom">
                    @Html.TextBoxFor(m => m.ClientTimeFrom, new { @class = "form-control" })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-sm-5" style="margin-left: -5px">
            <div class="form-group">
                <div class="input-group date" id="dtpTo">
                    @Html.TextBoxFor(m => m.ClientTimeTo, new { @class = "form-control" })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>*@
    @*<div class="row top-buffer form-inline @(Model.TimeEntryType == DigitalSignageAdapter.Models.Shared.TimeEntryType.FromTo ? "hidden" : "")">
        <div class="col-sm-2" style="margin-left: -5px">
            @Html.LabelFor(m => m.TimeInDays, "Days", new { @class = "btn btn-primary" })
        </div>
        <div class="col-sm-10">
            <div class="form-group" style="margin-left: -5px">
                @Html.TextBoxFor(m => m.TimeInDays, new { type = "number", min = "0", @class = "form-control" })
                <em>(0 = today)</em>
            </div>
        </div>
    </div>*@
    if (Model.BusinessList != null && Model.BusinessList.Count > 0)
    {
        <div class="row top-buffer">
            <div class="col-sm-3">
                <a href="javascript:$('form').submit()" class="btn btn-primary">
                    <span class="glyphicon glyphicon-refresh"></span>
                </a>
            </div>
            @*Header - line filter*@
            @for (int i = 0; i < Model.BusinessList.Count; i++)
            {
                var businessId = Model.BusinessList[i].Id;
                var allLines = Model.AllLines.Where(l => l.BusinessId == businessId).OrderBy(l => l.Name).ToArray();
                var usedLines = Model.BusinessList[i].Lines;
                <div class="col-sm-3">
                    <div class="line-header">
                        @*Header - lines selected for comparison*@
                        @if (usedLines != null)
                        {
                            for (int j = 0; j < usedLines.Count; j++)
                            {
                                var lineId = usedLines[j].Id;
                                var lineName = usedLines[j].Name;
                                <a href="#" class="btn btn-primary" data-business-idx="@i" data-line-idx="@j">
                                    <span class="glyphicon glyphicon-remove"></span> @lineName
                                </a>
                                @Html.HiddenFor(m => m.BusinessList[i].Lines[j].Id)
                            }
                        }

                        @*Header - dropdown for line selection*@
                        <div style="display:inline-block" class="dropdown line-dropdown">
                            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                                <span class="glyphicon glyphicon-filter"></span>
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu">
                                @for (int j = 0; j < allLines.Length; j++)
                                {
                                    var lineId = allLines[j].Id;
                                    var lineName = allLines[j].Name;
                                    if (usedLines != null && usedLines.Select(l => l.Id).Contains(lineId))
                                    {
                                        continue;
                                    }
                                    <li><a href="#" data-business-idx="@i" data-business-id="@businessId" data-line-id="@lineId">@lineName</a></li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    <div class="row top-buffer">
        @if (Model.BusinessList != null && Model.BusinessList.Count > 0)
        {
            <div class="col-sm-3">
                &nbsp;
            </div>
            @*Header - businesses selected for comparison*@
            <div class="business-header">
                @for (int i = 0; i < Model.BusinessList.Count; i++)
                    {
                        var businessId = Model.BusinessList[i].Id;
                        var businessName = Model.BusinessList[i].Name;
                    <div class="col-sm-3">
                        <a href="#" class="btn btn-primary" data-business-idx="@i">
                            <span class="glyphicon glyphicon-remove"></span> @businessName
                        </a>
                        @Html.HiddenFor(m => m.BusinessList[i].Id)
                    </div>
                }
            </div>
        }
        &nbsp;
        @*Header - dropdown for business selection*@
        @if (Model.BusinessList == null || Model.BusinessList.Count < 3)
        {
            <div style="display:inline-block" class="dropdown business-dropdown">
                <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                    Select business
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    @for (int i = 0; i < Model.AllBusinessList.Count; i++)
                    {
                        var businessId = Model.AllBusinessList[i].Id;
                        var businessName = Model.AllBusinessList[i].Name;
                        var usedBusinessIds = Model.BusinessList.Select(b => b.Id);
                        //if (usedBusinessIds.Contains(businessId))
                        //{
                        //    continue;
                        //}
                        <li><a href="#" data-business-id="@businessId">@businessName</a></li>
                    }
                </ul>
            </div>
        }
    </div>
    if (Model.BusinessList != null && Model.BusinessList.Count > 0)
    {
        @*Body - aggregated data*@
        <div class="row top-buffer">
            <div class="col-sm-3">
                Avg. wait time
            </div>
            @for (int i = 0; i < Model.BusinessList.Count; i++)
            {
                //var biz = Model.GetBusinessData(Model.BusinessList[i].Id);
                var biz = Model.AggregatedByBusiness[i];
                <div class="col-sm-3">
                    @biz.AverageWaitTimeDisplay
                </div>
            }
        </div>
        <div class="row">
            <div class="col-sm-3">
                Avg. svc time
            </div>
            @for (int i = 0; i < Model.BusinessList.Count; i++)
            {
                //var biz = Model.GetBusinessData(Model.BusinessList[i].Id);
                var biz = Model.AggregatedByBusiness[i];
                <div class="col-sm-3">
                    @biz.AverageServiceTimeDisplay
                </div>
            }
        </div>
        <div class="row">
            <div class="col-sm-3">
                Customers serviced
            </div>
            @for (int i = 0; i < Model.BusinessList.Count; i++)
            {
                //var biz = Model.GetBusinessData(Model.BusinessList[i].Id);
                var biz = Model.AggregatedByBusiness[i];
                <div class="col-sm-3">
                    @biz.CustomersServicedCount
                </div>
            }
        </div>
        <p />
        <p class="text-warning">
            Data from @Model.ClientTimeFrom.ToString("g", culture) to @Model.ClientTimeTo.ToString("g", culture)
            <small>
                <span class="glyphicon glyphicon-question-sign" title="Both persisted and real-time data"></span>
            </small>
        </p>
    }
}
